[{"categories":["rust"],"content":"在windows下安装rust。","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"Windows下安装rust\r","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:1:0","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"1. 安装前准备：\r下载mingw64,下载后解压，mingw64/bin/目录加入环境变量 下载rust_init.exe Rust编译链工具安装目录修改： Rust需要安装两个东西，一个是rustup，一个是cargo。所以你需要设置两个环境变量来分别指定他们的安装目录。 通过RUSTUP_HOME指定rustup的安装目录。 通过CARGO_HOME指定cargo的安装目录。 切换清华镜像,网络加速 配置加速安装地址: 直接从官方网站下载会很慢，改用国内镜像加速安装，设置以下`变量`，并一起加入`环境变量`： RUSTUP_DIST_SERVER https://mirrors.tuna.tsinghua.edu.cn/rustup RUSTUP_UPDATE_ROOT https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup 配置镜像配置库镜像 在“C:\\Users\\用户名\\”下创建“.cargo”文件夹，在文件夹内创建“config”文件，如下图： [source.crates-io] registry = “https://github.com/rust-lang/crates.io-index” replace-with = ‘tuna’ [source.tuna] registry = https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git ","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:1:1","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"2. 安装开始：\r打开预先下载好的rust_init.exe ，按照安装提示操作。 在弹出的命令窗中 选择2,回车，然后输入stable-x86_64-pc-windows-gnu You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-pc-windows-msvc default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with standard installation (default - just press enter) 2) Customize installation 3) Cancel installation \u003e2 I'm going to ask you the value of each of these installation options. You may simply press the Enter key to leave unchanged. Default host triple? [x86_64-pc-windows-msvc] stable-x86_64-pc-windows-gnu 后续一直回车即可 ","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:1:2","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"3. 安装完成，提示如下安装成功\rRust is installed now. Great! To get started you may need to restart your current shell. This would reload its PATH environment variable to include Cargo's bin directory (D:\\toolchains\\Rust\\.cargo\\bin). Press the Enter key to continue. ","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:1:3","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"4. 验证安装是否成功\rrustc --version cargo --version ","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:1:4","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["rust"],"content":"安装日志：\rRust Visual C++ prerequisites Rust requires a linker and Windows API libraries but they don't seem to be available. These components can be acquired through a Visual Studio installer. 1) Quick install via the Visual Studio Community installer (free for individuals, academic uses, and open source). 2) Manually install the prerequisites (for enterprise and advanced users). 3) Don't install the prerequisites (if you're targeting the GNU ABI). \u003e2 You can acquire the build tools by installing Microsoft Visual Studio. https://visualstudio.microsoft.com/downloads/ Check the box for \"Desktop development with C++\" which will ensure that the needed components are installed. If your locale language is not English, then additionally check the box for English under Language packs. For more details see: https://rust-lang.github.io/rustup/installation/windows-msvc.html Install the C++ build tools before proceeding. If you will be targeting the GNU ABI or otherwise know what you are doing then it is fine to continue installation without the build tools, but otherwise, install the C++ build tools before proceeding. Continue? (y/N) y Welcome to Rust! This will download and install the official compiler for the Rust programming language, and its package manager, Cargo. Rustup metadata and toolchains will be installed into the Rustup home directory, located at: D:\\toolchains\\Rust\\.rustup This can be modified with the RUSTUP_HOME environment variable. The Cargo home directory is located at: D:\\toolchains\\Rust\\.cargo This can be modified with the CARGO_HOME environment variable. The cargo, rustc, rustup and other commands will be added to Cargo's bin directory, located at: D:\\toolchains\\Rust\\.cargo\\bin This path will then be added to your PATH environment variable by modifying the HKEY_CURRENT_USER/Environment/PATH registry key. You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-pc-windows-msvc default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with standard installation (default - just press enter) 2) Customize installation 3) Cancel installation \u003e2 I'm going to ask you the value of each of these installation options. You may simply press the Enter key to leave unchanged. Default host triple? [x86_64-pc-windows-msvc] stable-x86_64-pc-windows-gnu 后续一直回车即可 .......... You can uninstall at any time with rustup self uninstall and these changes will be reverted. Current installation options: default host triple: x86_64-pc-windows-msvc default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with standard installation (default - just press enter) 2) Customize installation 3) Cancel installation \u003e info: profile set to 'default' info: default host triple is x86_64-pc-windows-gnu info: syncing channel updates for 'stable-x86_64-pc-windows-gnu' 759.8 KiB / 759.8 KiB (100 %) 287.7 KiB/s in 2s ETA: 0s info: latest update on 2024-08-08, rust version 1.80.1 (3f5fd8dd4 2024-08-06) info: downloading component 'cargo' info: downloading component 'clippy' info: downloading component 'rust-docs' info: downloading component 'rust-mingw' info: downloading component 'rust-std' info: downloading component 'rustc' 74.7 MiB / 74.7 MiB (100 %) 272.0 KiB/s in 4m 55s ETA: 0s info: downloading component 'rustfmt' 3.2 MiB / 3.2 MiB (100 %) 269.5 KiB/s in 12s ETA: 0s info: installing component 'cargo' info: installing component 'clippy' info: installing component 'rust-docs' 15.7 MiB / 15.7 MiB (100 %) 1.5 MiB/s in 11s ETA: 0s info: installing component 'rust-mingw' info: installing component 'rust-std' 22.5 MiB / 22.5 MiB (100 %) 11.4 MiB/s in 1s ETA: 0s info: installing component 'rustc' 74.7 MiB / 74.7 MiB (100 %) 13.5 MiB/s in 5s ETA: 0s info: installing component 'rustfmt' info: default toolchain set to 'stable-x86_64-pc-windows-gnu' stable-x86_64-pc-windows-gnu installed - rustc 1.80.1 (3f5fd8dd4 2","date":"2024-08-17","objectID":"/CTGU-Hugo-Blog.io/posts/ca1d32f/:2:0","tags":["rust"],"title":"rust安装使用","uri":"/CTGU-Hugo-Blog.io/posts/ca1d32f/"},{"categories":["stable-diffusion"],"content":"stable-diffusion-webui下载安装\r首先请访问github项目：https://github.com/AUTOMATIC1111/stable-diffusion-webui ， ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/4d19e60/:1:0","tags":["stable-diffusion-webui"],"title":"Stable Diffusion Webui_setup","uri":"/CTGU-Hugo-Blog.io/posts/4d19e60/"},{"categories":["stable-diffusion"],"content":"Windows下的安装方式一\r优点：安装简单，无需网络，直接下载安装，安装过程简单 缺点：版本可能滞后一些，但更加稳定可靠 Installation on Windows 10/11 with NVidia-GPUs using release package Download sd.webui.zip from v1.0.0-pre and extract its contents:https://github.com/AUTOMATIC1111/stable-diffusion-webui/releases/tag/v1.0.0-pre Unzip sd.webui.zip to a folder of your choice. Run update.bat. 双击两次 Run run.bat. 双击两次 完成初始化安装操 ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/4d19e60/:1:1","tags":["stable-diffusion-webui"],"title":"Stable Diffusion Webui_setup","uri":"/CTGU-Hugo-Blog.io/posts/4d19e60/"},{"categories":["stable-diffusion"],"content":"Windows下的安装方式二\r缺点：需要网络良好，拉取并构建一堆python包，过程漫长，25~40分钟 优点：可以获取最新的 stable-diffusion-webui 版本 Install Python 3.10.6 (Newer version of Python does not support torch), checking “Add Python to PATH”. Install Git. Download the stable-diffusion-webui repository, for example by running git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git Then, run webui-user.bat from Windows Explorer as normal, non-administrator, user.Just click webui-user.bat twice to run it. 完成初始化安装操作 ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/4d19e60/:1:2","tags":["stable-diffusion-webui"],"title":"Stable Diffusion Webui_setup","uri":"/CTGU-Hugo-Blog.io/posts/4d19e60/"},{"categories":["stable-diffusion"],"content":"如何使用\r刚开始肯定一脸懵逼，咋画不出高大上的效果啊？ 提示：可以用colab练手，使用python编程进行AI绘画。 prompt提示词 首先，得学会使用 prompt，也就是生成图片的描述，Stable Diffusion 通过英文文字内容来描述场景或物体，以此来决定生成的图像中会出现什么。文字描述是决定图像生成质量的关键因素。具体如何写 prompt 不在本文讨论范围，请自行搜索相关文章，网上很多。 这几个网站可以按提示组合生成 prompt： https://promptomania.com/stable-diffusion-prompt-builder/ https://weirdwonderfulai.art/resources/disco-diffusion-modifiers/ 这几个网站有很多人分享的成品图和描述文案： https://prompthero.com/ https://openart.ai/ 模型 模型是个统称，其中包含了Checkpoints、LORA、Texture之类的，不细说了，按照模型网站上的教程安装使用就行。 然后模型的话，可以去这几个网站下载： liblib绘画：liblib绘画 即 https://www.liblib.art/ huggingface抱脸:huggingface，即 https://civitai.com/ civitai:civitai 即 https://civitai.com/ ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/4d19e60/:2:0","tags":["stable-diffusion-webui"],"title":"Stable Diffusion Webui_setup","uri":"/CTGU-Hugo-Blog.io/posts/4d19e60/"},{"categories":["vsocde配置"],"content":"Vsocde Task Documents\rMarkdown 与一些代码补全问题\r打开VScode的setting.json在[markdown]下新增或修改editor.quickSuggestions即可： { \"[markdown]\": { \"editor.quickSuggestions\": { \"other\": \"on\", \"comments\": \"on\", \"strings\": \"on\" }, } } ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/2bf712f/:1:0","tags":["vsocde"],"title":"Vscode LSP补全","uri":"/CTGU-Hugo-Blog.io/posts/2bf712f/"},{"categories":["vsocde配置"],"content":"Vsocde Task Documents\r","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/2bf712e/:1:0","tags":["vsocde"],"title":"vscode-Snippet了解","uri":"/CTGU-Hugo-Blog.io/posts/2bf712e/"},{"categories":["git-basic"],"content":"Git 基本配置\r安装 Git,以及本地使用git bash 下载，并在本地安装git 从这里 https://git-scm.com/downloads ，下载安装适配的git bash版本; 配置用户名和邮箱 随便一个位置鼠标右键打开Git Bash命令行终端，执行下列命令，配置用户名和邮箱。 git config --global user.name \"用户名\" git config --global user.email \"你的邮箱\" 查看你的用户名和邮箱配置信息，确认用户名和你的邮箱都填写无误。 可以在 Git bash 使用如下命令， git config --global user.name git config --global user.email ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/95a3d7f/:1:0","tags":["git"],"title":"Git基础配置","uri":"/CTGU-Hugo-Blog.io/posts/95a3d7f/"},{"categories":["git-basic"],"content":"与 Github 创建连接\r创建链接，用于本地与Github服务端进行交互。 不进行该操作，无法git clone 操作。 如果网站部署在 Github 上的话，需要本地与 Github服务端 创建链接。 应该进行： 生成本地本机公钥文件； 在本地打开Git Bash命令行终端，输入这行指令，创建公钥文件； ssh-keygen -t rsa 将SSH key 添加到 ssh-agent ssh-add ~/.ssh/id_rsa 其中 ssh-keygen -t rsa -C \"***@163.com\" -C 参数并不是必需的; -C 参数是用来添加一个注释到你的密钥中的，通常可以用来标识密钥的所有者或者用途，例如使用你的电子邮件地址作为注释。 在Git Bash命令行终端输入这条指令查看公钥，并==复制保存公钥==。 cat ~/.ssh/id_rsa.pub 也可以直接到C:\\Users\\你的用户名.ssh\\文件夹下查看 id_rsa.pub 文件 然后,在Github网页端， 添加 SSH公钥。 登录 GitHub，点击右上角头像，进入设置，把 SSH 公钥填进去就 OK 了。 最后，在本地打开 Git Bash，输入下面的命令,验证连接 状态。 ssh -T git@github.com ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/95a3d7f/:2:0","tags":["git"],"title":"Git基础配置","uri":"/CTGU-Hugo-Blog.io/posts/95a3d7f/"},{"categories":["git-basic"],"content":"Git Clone项目\r在Github上，找到需要clone的项目，点击Code按钮，复制SSH链接。 git clone ssh链接 如果clone的项目有子模块，需要使用--recurse-submodules参数。 git clone --recurse-submodules ssh链接 ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/95a3d7f/:3:0","tags":["git"],"title":"Git基础配置","uri":"/CTGU-Hugo-Blog.io/posts/95a3d7f/"},{"categories":["git-basic"],"content":"参考文章\r\u003c零基础学习Git\u003e -一条狗的传说 ","date":"2024-08-12","objectID":"/CTGU-Hugo-Blog.io/posts/95a3d7f/:4:0","tags":["git"],"title":"Git基础配置","uri":"/CTGU-Hugo-Blog.io/posts/95a3d7f/"},{"categories":["hugo主题-FixIt配置"],"content":"如何hugo建站可以参考：\rhttps://www.cnblogs.com/legenddog/p/17632687.html ","date":"2024-08-11","objectID":"/CTGU-Hugo-Blog.io/posts/a116deb/:1:0","tags":["draft"],"title":"Hugo仓库维护与博客更新","uri":"/CTGU-Hugo-Blog.io/posts/a116deb/"},{"categories":["hugo主题-FixIt配置"],"content":"从github拉取hugo博客仓库，本地部署\r","date":"2024-08-11","objectID":"/CTGU-Hugo-Blog.io/posts/a116deb/:2:0","tags":["draft"],"title":"Hugo仓库维护与博客更新","uri":"/CTGU-Hugo-Blog.io/posts/a116deb/"},{"categories":["hugo主题-FixIt配置"],"content":"配置本地hugo环境\r安装hugo 参考地址：https://gohugo.io/installation/ ","date":"2024-08-11","objectID":"/CTGU-Hugo-Blog.io/posts/a116deb/:2:1","tags":["draft"],"title":"Hugo仓库维护与博客更新","uri":"/CTGU-Hugo-Blog.io/posts/a116deb/"},{"categories":["hugo主题-FixIt配置"],"content":"拉取仓库到本地\r直接拉取+clone子模块 git clone --recurse-submodules https://github.com/crack-dawn/CTGU-Hugo-Blog.io.git 忘记拉取子模块，可以进行 cd CTGU-Hugo-Blog.io git submodule init git submodule update --recursive ","date":"2024-08-11","objectID":"/CTGU-Hugo-Blog.io/posts/a116deb/:2:2","tags":["draft"],"title":"Hugo仓库维护与博客更新","uri":"/CTGU-Hugo-Blog.io/posts/a116deb/"},{"categories":["hugo主题-FixIt配置"],"content":"Vscode作为编辑器，配置hugo任务\r// https://code.visualstudio.com/docs/editor/tasks-appendix { \"version\": \"2.0.0\", \"presentation\": { \"echo\": true, \"reveal\": \"always\", \"focus\": false, \"panel\": \"new\", \"showReuseMessage\": true, \"clear\": true }, \"options\": { \"cwd\": \"${workspaceFolder}\",//默认进入到 hugo项目根目录 }, \"problemMatcher\": [], \"tasks\": [ {// \"type\": \"shell\", \"label\": \"1.hugo serve(本地构建测试)\", \"command\": \"hugo serve -D -e production --gc\", \"isBackground\": true, \"group\": { \"kind\": \"build\", \"isDefault\": true } }, {// \"label\": \"2.open browser(打开本地浏览器)\", \"type\": \"shell\", \"windows\":{ \"command\": \"start http://localhost:1313/CTGU-Hugo-Blog.io/\", }, \"linux\":{ \"command\": \"xdg-open http://localhost:1313/CTGU-Hugo-Blog.io/\", }, \"osx\":{ \"command\": \"open http://localhost:1313/CTGU-Hugo-Blog.io/\", }, }, {// \"label\": \"hugo new file(新建博客文件)\", \"type\": \"shell\", \"command\":\"hugo new ./content/posts/${input:newFileName}\" }, { \"label\": \"3.open Document folder(打开./content/posts文件夹)\", \"type\": \"shell\", \"command\": \"code --goto ${workspaceFolder}/content/posts\", } ], \"inputs\": [ { \"id\": \"newFileName\", \"type\": \"promptString\", \"default\": \"*.md\", \"description\": \"输入要创建的文件名\" } ], } ","date":"2024-08-11","objectID":"/CTGU-Hugo-Blog.io/posts/a116deb/:2:3","tags":["draft"],"title":"Hugo仓库维护与博客更新","uri":"/CTGU-Hugo-Blog.io/posts/a116deb/"},{"categories":null,"content":"crack-dawn's friends","date":"2024-07-22","objectID":"/CTGU-Hugo-Blog.io/friends/","tags":null,"title":"Friends Links","uri":"/CTGU-Hugo-Blog.io/friends/"},{"categories":null,"content":"Base Info\r- nickname: Lruihao avatar: https://lruihao.cn/images/avatar.jpg url: https://lruihao.cn description: Lruihao's Note ","date":"2024-07-22","objectID":"/CTGU-Hugo-Blog.io/friends/:1:0","tags":null,"title":"Friends Links","uri":"/CTGU-Hugo-Blog.io/friends/"},{"categories":null,"content":"Friendly Reminder\rNotice\rIf you want to exchange link, please leave a comment in the above format. (personal non-commercial blogs / websites only)  Website failure, stop maintenance and improper content may be unlinked! Those websites that do not respect other people’s labor achievements, reprint without source, or malicious acts, please do not come to exchange. When you set data friends.yml in yourProject/data/ directory, it will be automatically loaded here. ","date":"2024-07-22","objectID":"/CTGU-Hugo-Blog.io/friends/:2:0","tags":null,"title":"Friends Links","uri":"/CTGU-Hugo-Blog.io/friends/"},{"categories":["hugo主题-FixIt配置"],"content":"Hugo如何插入评论系统\r主要为hugo Fixit主题下的操作 vercel网址： https://vercel.com/ vercel部署waline教程：https://waline.js.org/guide/get-started/ vercel部署waline评论管理后台：delpoy – 请参考affectalways的博客 请参考mostima的博客 请参考waline.js.org 请参考SHU_Fly网站源码 ","date":"2024-07-21","objectID":"/CTGU-Hugo-Blog.io/posts/f30d7fd/:1:0","tags":["draft"],"title":"hugo杂记","uri":"/CTGU-Hugo-Blog.io/posts/f30d7fd/"},{"categories":["hugo主题-FixIt配置"],"content":"Waline评论管理\r评论管理后台地址为serverURL/ui/register , 首个注册的用户会被设为管理员账户, 之后注册的用户则为普通用户 我的 serverURL为: https://walinecomment-crack-dawns-projects.vercel.app/ 我的评论管理后台地址为: https://walinecomment-crack-dawns-projects.vercel.app/ui ","date":"2024-07-21","objectID":"/CTGU-Hugo-Blog.io/posts/f30d7fd/:1:1","tags":["draft"],"title":"hugo杂记","uri":"/CTGU-Hugo-Blog.io/posts/f30d7fd/"},{"categories":["hugo主题-FixIt配置"],"content":"Hugo如何添加友情链接页面\r参考文章 hugo添加友链页面（FixIt主题） Hugo添加友链卡片及页面（Lovety主题）作者：stilig ","date":"2024-07-21","objectID":"/CTGU-Hugo-Blog.io/posts/f30d7fd/:2:0","tags":["draft"],"title":"hugo杂记","uri":"/CTGU-Hugo-Blog.io/posts/f30d7fd/"},{"categories":["hugo主题-FixIt配置"],"content":"惊艳的博客面板\rqcqx的博客 (Hexo) lanzlz的博客 https://www.zair.top/links/ ","date":"2024-07-21","objectID":"/CTGU-Hugo-Blog.io/posts/f30d7fd/:3:0","tags":["draft"],"title":"hugo杂记","uri":"/CTGU-Hugo-Blog.io/posts/f30d7fd/"},{"categories":["typst"],"content":"Markdown代码块测试\r代码块 Typst is a new markup-based typesetting system that is designed to be as powerful as LaTeX while being much easier to learn and use. Typst has: Built-in markup for the most common formatting tasks Flexible functions for everything else A tightly integrated scripting system Math typesetting, bibliography management, and more Fast compile times thanks to incremental compilation Friendly error messages in case something goes wrong This repository contains the Typst compiler and its CLI, which is everything you need to compile Typst documents locally. For the best writing experience, consider signing up to our collaborative online editor for free. It is currently in public beta. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:1:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Example\rA gentle introduction to Typst is available in our documentation. However, if you want to see the power of Typst encapsulated in one image, here it is: Let’s dissect what’s going on: We use set rules to configure element properties like the size of pages or the numbering of headings. By setting the page height to auto, it scales to fit the content. Set rules accommodate the most common configurations. If you need full control, you can also use show rules to completely redefine the appearance of an element. We insert a heading with the = Heading syntax. One equals sign creates a top level heading, two create a subheading and so on. Typst has more lightweight markup like this, see the syntax reference for a full list. Mathematical equations are enclosed in dollar signs. By adding extra spaces around the contents of an equation, we can put it into a separate block. Multi-letter identifiers are interpreted as Typst definitions and functions unless put into quotes. This way, we don’t need backslashes for things like floor and sqrt. And phi.alt applies the alt modifier to the phi to select a particular symbol variant. Now, we get to some scripting. To input code into a Typst document, we can write a hash followed by an expression. We define two variables and a recursive function to compute the n-th fibonacci number. Then, we display the results in a center-aligned table. The table function takes its cells row-by-row. Therefore, we first pass the formulas $F_1$ to $F_8$ and then the computed fibonacci numbers. We apply the spreading operator (..) to both because they are arrays and we want to pass the arrays’ items as individual arguments. #set page(width: 10cm, height: auto) #set heading(numbering: \"1.\") = Fibonacci sequence The Fibonacci sequence is defined through the recurrence relation $F_n = F_(n-1) + F_(n-2)$. It can also be expressed in _closed form:_ $ F_n = round(1 / sqrt(5) phi.alt^n), quad phi.alt = (1 + sqrt(5)) / 2 $ #let count = 8 #let nums = range(1, count + 1) #let fib(n) = ( if n \u003c= 2 { 1 } else { fib(n - 1) + fib(n - 2) } ) The first #count numbers of the sequence are: #align(center, table( columns: count, ..nums.map(n =\u003e $F_#n$), ..nums.map(n =\u003e str(fib(n))), )) ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:2:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Installation\rTypst’s CLI is available from different sources: You can get sources and pre-built binaries for the latest release of Typst from the releases page. Download the archive for your platform and place it in a directory that is in your PATH. To stay up to date with future releases, you can simply run typst update. You can install Typst through different package managers. Note that the versions in the package managers might lag behind the latest release. Linux: View Typst on Repology macOS: brew install typst Windows: winget install --id Typst.Typst If you have a Rust toolchain installed, you can install the latest released Typst version with cargo install --locked typst-cli a development version with cargo install --git https://github.com/typst/typst --locked typst-cli Nix users can use the typst package with nix-shell -p typst build and run a development version with nix run github:typst/typst -- --version. Docker users can run a prebuilt image with docker run -it ghcr.io/typst/typst:latest. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:3:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Usage\rOnce you have installed Typst, you can use it like this: # Creates `file.pdf` in working directory. typst compile file.typ # Creates PDF file at the desired path. typst compile path/to/source.typ path/to/output.pdf You can also watch source files and automatically recompile on changes. This is faster than compiling from scratch each time because Typst has incremental compilation. # Watches source files and recompiles on changes. typst watch file.typ Typst further allows you to add custom font paths for your project and list all of the fonts it discovered: # Adds additional directories to search for fonts. typst compile --font-path path/to/fonts file.typ # Lists all of the discovered fonts in the system and the given directory. typst fonts --font-path path/to/fonts # Or via environment variable (Linux syntax). TYPST_FONT_PATHS=path/to/fonts typst fonts For other CLI subcommands and options, see below: # Prints available subcommands and options. typst help # Prints detailed usage of a subcommand. typst help watch If you prefer an integrated IDE-like experience with autocompletion and instant preview, you can also check out the Typst web app, which is currently in public beta. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:4:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Community\rThe main place where the community gathers is our Discord server. Feel free to join there to ask questions, help out others, share cool things you created with Typst, or just to chat. Aside from that there are a few places where you can find things built by the community: The official package list The Awesome Typst repository If you had a bad experience in our community, please reach out to us. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:5:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Contributing\rWe would love to see contributions from the community. If you experience bugs, feel free to open an issue. If you would like to implement a new feature or bug fix, please follow the steps outlined in the contribution guide. To build Typst yourself, first ensure that you have the latest stable Rust installed. Then, clone this repository and build the CLI with the following commands: git clone https://github.com/typst/typst cd typst cargo build --release The optimized binary will be stored in target/release/. Another good way to contribute is by sharing packages with the community. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:6:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Pronunciation and Spelling\rIPA: /taɪpst/. “Ty” like in Typesetting and “pst” like in Hipster. When writing about Typst, capitalize its name as a proper noun, with a capital “T”. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:7:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["typst"],"content":"Design Principles\rAll of Typst has been designed with three key goals in mind: Power, simplicity, and performance. We think it’s time for a system that matches the power of LaTeX, is easy to learn and use, all while being fast enough to realize instant preview. To achieve these goals, we follow three core design principles: Simplicity through Consistency: If you know how to do one thing in Typst, you should be able to transfer that knowledge to other things. If there are multiple ways to do the same thing, one of them should be at a different level of abstraction than the other. E.g. it’s okay that = Introduction and #heading[Introduction] do the same thing because the former is just syntax sugar for the latter. Power through Composability: There are two ways to make something flexible: Have a knob for everything or have a few knobs that you can combine in many ways. Typst is designed with the second way in mind. We provide systems that you can compose in ways we’ve never even thought of. TeX is also in the second category, but it’s a bit low-level and therefore people use LaTeX instead. But there, we don’t really have that much composability. Instead, there’s a package for everything (\\usepackage{knob}). Performance through Incrementality: All Typst language features must accommodate for incremental compilation. Luckily we have comemo, a system for incremental compilation which does most of the hard work in the background. ","date":"2024-07-20","objectID":"/CTGU-Hugo-Blog.io/posts/0077ac4/:8:0","tags":["typst"],"title":"Typst Introduction","uri":"/CTGU-Hugo-Blog.io/posts/0077ac4/"},{"categories":["hugo主题-FixIt配置"],"content":" FixIt内容的目录结构 -|(内容)content -|posts -|分类(categeries) -|合集(collections) -|index.md 标注合集大类的名称 -|合集1文章存放处 -|index.md (标注合集1的名称，一般和文件夹同名) -|文章1.md -|合集2文章存放处 -|index.md (标注合集2的名称 一般和文件夹同名) -|文章6.md -|friends -|about -|reward ","date":"2024-06-28","objectID":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/:0:0","tags":["draft"],"title":"合集配置踩坑记录","uri":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/"},{"categories":["hugo主题-FixIt配置"],"content":"FixIt主题，建立文档合集\r最好将合集文章放入 content/posts/collections/ 目录下💡；或是通过，在合集文章开头加上 collections: [\"集合1\"] 将文章归入对应合集。 ","date":"2024-06-28","objectID":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/:1:0","tags":["draft"],"title":"合集配置踩坑记录","uri":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/"},{"categories":["hugo主题-FixIt配置"],"content":"文档合集Fixt主题的相关设置\r开启[page]的这些设置项。 # FixIt 0.3.0 | 新增 是否在侧边栏显示集合列表 collectionList = true # FixIt 0.3.0 | 新增 是否在文章末尾显示集合导航 collectionNavigation = true 注意taxonomies.toml配置项,务必添加 collection = \"collections\"，不要少s，也不要多s,如下配置 # ------------------------------------------------------------------------------------- # Taxonomies Configuration # `taxonomies.toml` # See: https://gohugo.io/content-management/taxonomies/#configure-taxonomies # ------------------------------------------------------------------------------------- collection = \"collections\" category = \"categories\" tag = \"tags\" series = 'series' 最后，合集文章开头记得加上 collections: [\"集合1\"] 将文章归入对应合集。=（不要少写s）= ","date":"2024-06-28","objectID":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/:1:1","tags":["draft"],"title":"合集配置踩坑记录","uri":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/"},{"categories":["hugo主题-FixIt配置"],"content":"FixIt 的markup.toml的[goldmark]导致的错误：\rERROR error calling resources.GetRemote: Get \"https://publish.twitter.com/oembed?dnt=true\u0026url=https%3A%2F%2Ftwitter.com%2FSanDiegoZoo%2Fstatus%2F1453110110599868418\": dial tcp 174.36.228.136:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond. Built in 22619 ms Error: error building site: logged 1 error(s) # ------------------------------------------------------------------------------------- # Markup related configuration in Hugo # See: https://gohugo.io/getting-started/configuration-markup/ # ------------------------------------------------------------------------------------- # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) # Table Of Contents settings [tableOfContents] ordered = true startLevel = 2 endLevel = 7 ########## necessary configurations ########## [highlight] # https://github.com/Lruihao/FixIt/issues/43 codeFences = true lineNos = true lineNumbersInTable = true noClasses = false guessSyntax = true ########## necessary configurations ########## # [goldmark] # 默认 FixIt 的配置，用户不适宜改动，不然莫名出现如上的错误 # _merge = \"shallow\" # # Goldmark is from Hugo 0.60 the default library used for Markdown # [goldmark] # [goldmark.extensions] # definitionList = true # footnote = true # linkify = true # strikethrough = true # table = true # taskList = true # typographer = true # [goldmark.parser] # autoHeadingID = true # autoHeadingIDType = \"github\" # wrapStandAloneImageWithinParagraph = true # [goldmark.parser.attribute] # block = true # title = true # [goldmark.renderer] # # By default, Goldmark ignores newlines within a paragraph. Set to true to render newlines as \u003cbr\u003e elements. # hardWraps = false # # whether to use HTML tags directly in the document # unsafe = true 踩坑有点多了😶 ","date":"2024-06-28","objectID":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/:2:0","tags":["draft"],"title":"合集配置踩坑记录","uri":"/CTGU-Hugo-Blog.io/posts/fixit%E5%90%88%E9%9B%86%E9%85%8D%E7%BD%AE/"},{"categories":null,"content":"由 上海大学开源社区 出品 ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:0:0","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"如何使用\r","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:1:0","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"在线网站\r访问 https://shuosc.github.io/fly/ 点击右上角 分类 或 标签 以快速查看 ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:1:1","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"本地部署\rgit clone https://github.com/shuosc/fly.git --depth=1 cd fly git submodule update --init --recursive # 拉取 Hugo 主题 # 确保已安装 Hugo hugo serve ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:1:2","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"如何贡献\r支持使用本名或昵称投稿 内容可按照 time-name-major-how-where.md 中的 Markdown 模板准备 为方便不熟悉计算机操作者，提供以下两种方式： ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:2:0","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"GitHub 提交\rFork 本项目 添加并编辑 Markdown 文件 hugo new posts/time-name-major-how-where.md 或直接复制 posts/ 目录下现有文件并修改 注意文件名规范 在开头添加 category/tag，方便快速检索不同专业，保研/考研/出国/工作等去向，以及 CN/US/CA/UK/SG 等上岸地区 若有条件可在本地部署预览网页效果 发起 Pull Request ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:2:1","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"},{"categories":null,"content":"邮箱投递\r发送电子邮件至 shuosc@duck.com 标题请注明「投稿/修改-姓名-专业-去向」并在邮件中附上联系方式(微信/QQ等) 注意\r文章中涉及联系方式时(邮箱/微信号/QQ/知乎/Github…)，建议最好是附公开联系方式，以避免不必要的骚扰。 感谢各位学长学姐(SHUers)的支持，祝你们前程似锦，未来可期٩(•̤̀ᵕ•̤́๑)ᵒᵏ！ ","date":"2022-08-29","objectID":"/CTGU-Hugo-Blog.io/about/about/:2:2","tags":null,"title":"关于上海大学溯源手册","uri":"/CTGU-Hugo-Blog.io/about/about/"}]